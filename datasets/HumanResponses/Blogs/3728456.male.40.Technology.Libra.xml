<Blog>

<date>10,July,2004</date>
<post>


       
      I want to spend the next week looking at some of the different utilities used to lock down a Linux box and make it harder for someone to hack into it.     PS  command PS stands for  process status .  This command lists the current running processes on a system appropriate for the privilege of the user using the command and also their characteristics, when used with certain options.  Used to check and minimize security breaches, unwanted accesses, and idle processes. If pid arguments are specified then only those processes are listed, otherwise all processes with the same effective user id and controlling terminal are listed.  Older versions of the PS program will return an error if the dash (-) is used.  hence sometimes  ps -aux  will be shown as  ps aux .   OPTIONS    -a, --interactive      List all processes associated with terminals.  -t, --terminals|ttys=tty...      List processes with controlling terminals in the tty list.   -T, --tree|forest      Display the process tree hierarchy in the COMMAND field list.  -u|U, --users=user...      List processes with real user id names or numbers in the user list.   -v, --verbose      List verbose error messages for inaccessible processes.   -x, --hex      List numeric entries in hexadecimal notation.  
     

    
</post>

<date>09,July,2004</date>
<post>


       
      Here are some useful Apt-Get commands that I've found.   apt-get install rdate  This will install the rdate program once it's installed then you can decide which time server to set your clock against.  The two time servers I've found are the National Research Council, Ottawa, Canada or the NIST Laboratories, Boulder, CO.  The respective commands to be used are either  rdate time.nrc.ca  or  rdate time.nist.gov    apt-get install makepasswd  This will install the makepasswd utility for randomly generated passwords.  The command after the makepasswd utility is installed is  makepasswd --count=10  this would generate 10 passwords of various lengths.     apt-get -s (command) (package name)  The -s option tells apt-get to simulate the events that would occur if the command were actually ran.  Simulate prints out a series of lines representing the command action, but does not actually change the system.
     

    
</post>

<date>08,July,2004</date>
<post>


       
       urlLink InstallShield  has released a version of their popular Installation software for Linux.  Here is the  urlLink Press Release  with some of the features:        1. Easily create installations that will run on Linux using a dedicated          point-and-click interface       2. Compact Project Type for smallest footprint       3. Instantly Notify Users of Updates       4. Easily mark files that will always need to be overwritten at installation time      5. Mobile Device Support    urlLink Newsforge  has an interview with Bob Corrigan, the product manager for InstallShield X, and Gerold Franke, InstallShield public relations, regarding their push into the Linux world.  One of the issues they've identified is the indivudual or corporation who are moving towards Linux and want an easy way to install software without having to get down and dirty with the install process.  I think this is an important step in Linux making a move into mainstream use where users are focused on using the applications which can be used with Linux and not having users focus on specific installation processes.
     

    
</post>

<date>08,July,2004</date>
<post>


       
       last, lastb  - show listing of last logged in users    The  Last  command searches back through the file  /var/log/wtmp  (or the file designated by the -f flag) and displays a list of all users logged in (and out) since that file was created. Names of users and tty's can be given, in which case last will show only those entries matching the arguments.  The  Lastb  command is the same as  last , except that by default it shows a log of the file  /var/log/btmp , which contains all the bad login attempts.   The pseudo user reboot logs in each time the system is rebooted. Thus  last  reboot will show a log of all reboots since the log file was created.   OPTIONS    -num      This is a count telling last how many lines to show.    -n num      The same.    -t YYYYMMDDHHMMSS      Display the state of logins as of the specified time. This is useful, e.g., to determine easily who was logged in at a particular time -- specify that time with -t and look for "still logged in".    -R      Suppresses the display of the hostname field.    -a      Display the hostname in the last column. Useful in combination with the next flag.    -d      For non-local logins, Linux stores not only the host name of the remote host but its IP number as well. This option translates the IP number back into a hostname.    -i      This option is like -d in that it displays the IP number of the remote host, but it displays the IP number in numbers-and-dots notation.    -o      Read an old-type wtmp file (written by linux-libc5 applications).    -x      Display the system shutdown entries and run level changes. 
     

    
</post>

<date>15,July,2004</date>
<post>


       
      This will be the final piece on this subject for the time being.  In my look at the initial things to look at when securing a Linux box.    This post is going to follow-up on the find command which searched for setuid & setgid permissions.  Vulnerabilities in the setuid/setgid binaries can often lead to root compromise, so they should only be used when necessary.  Once again after running the  find / -perm +6000 -type f ls  command we will be given a list of the different files which are ran with root priveleges.  The  urlLink US-CERT site  covers this topic as well as looking at the ncheck command.  The root privileges should be removed from unnecessary binaries with the chmod command using the -s flag.   Which permissions to remove this from are dependent on if your system has untrusted local users and which applications are required to run with system privileges from non-root users.   In a future post I'll try and look at the different files which are given root privileges by default and wether they actually need the priviliges or not.   
     

    
</post>

<date>14,July,2004</date>
<post>


       
      Today I'm going to go back to the netstat command that I talked about a couple of days ago.  Essentially it will show you all the sockets that are in the LISTEN state and the programs that are listening on each port. The big issue here is what services should this particular Linux box be listening for.  If this box is being used as a Web server should there be a printer hooked up & should the box be running an lpd daemon in the back ground -- NO!!  This is why it is important to only have essential services and daemons running on a Linux box.  There is a good article at the Techrepublic web site titled " urlLink Improve your Linux security: Stop unnecessary services ".  Which talks about the same issues.  A sample of the  urlLink /etc/initd.conf  file can be found at the userlocal.com web site.  some other good sites with a good overview of the security implications are found on the  urlLink Redhat site ,  urlLink YoLinux.com  site, and the  urlLink resnet.ubc.ca  site. 
     

    
</post>

<date>12,July,2004</date>
<post>


       
      In this third entry into my Locking down items I want to look at the commands which tell  the Linux box to run programs under a different user id or group id.  The SETUID and SETGID commands are very powerful commands in that they allow a program to be ran under a different user id or group id.  Why is this important - a program which doesn't need to be running on a server can be given ROOT privileges for no reason and can create a security hole that can be exploited.  as any good admin knows the only services which should be running are those that need to be running on that particular box.  The fastest way to find these files is to use the  FIND  command with a few particular options.  The command is  find / -perm +6000 -type f ls   what this command will do is search from the root partition for any file with permissions of 6000 or higher, is a file, and is executable. Obviously any executable file which runs with ROOT privileges should have the interest of the Administrator.  
     

    
</post>

<date>11,July,2004</date>
<post>


       
      Continuing with my look at different tools to monitor a Linux box, the next command I want to look at is the netstat command.  Before I look at the  netstat  cpmmand I want to look at the file which determines which services get started at boot time.  This file is the  /etc/initd.conf , this file manages all the incoming connections into the Linux box.  When a connection is made, inetd starts a copy of the appropriate daemon for that port.  These are the services which are running in the background and which can potentially be security risks on a system.  Running the command  cat /etc/initd.conf  and looking for uncommented lines will show you which services are running.   netstat   command Prints network connections, routing tables, interface statistics, masquerade connections, and multicast memberships. Essentially it will show you all the sockets that are in the  LISTEN  state and the programs that are listening on each port. Netstat prints information about the Linux networking subsystem.    OPTIONS    (none)  By default, netstat displays a list of open sockets. If you don't specify any address families, then the active sockets of all configured address families will be printed.     --route , -r  Display the kernel routing tables.     --interface=iface , -i  Display a table of all network interfaces, or the specified iface).     --verbose , -v  Tell the user what is going on by being verbose. Especially print some useful information about unconfigured address families.     --numeric , -n  Show numerical addresses instead of trying to determine symbolic host, port or user names.     -p, --program  Show the PID and name of the program to which each socket belongs.     -l, --listening  Show only listening sockets. (These are omitted by default.)     -a, --all  Show both listening and non-listening sockets. With the --interfaces option, show interfaces that are not marked       
     

    
</post>

<date>20,July,2004</date>
<post>


       
      This follows on the ideas I've been putting out about using SSH in the everyday environment of an Administrator.  The next use for SSH is to transfer files across a network, either from a remote machine or to a remote machine.   urlLink SCP (Secure Copy) , the SSH version of  rcp , can transparently and securly copy files over the SSH protocol.  With SSH you can also cpy between two remote systems without having to go through the local machine.      A good reason to transfer files via SSH is to move log files or configuration files from one machine to another machine.  A nice added feature of SCP is that jobs can be automated with a Cron job.  A key feature of the automated option is that public keys needs to be set up which I'll cover in another day or two.    The basic command looks like this:  scp    user@remotebox:~/  This will transfer the file listed in file name from the remote box to the local box.  The colon after the remote box tells scp where to copy the file to.  The ~/ lists the destination on the local box where to copy the file to, the default is the home directory of the user signed in with SSH.    Changing the order of the command will give a different result.  Changing the order as thus: scp user@remotebox:  /tmp/special  This command will copy the file from the user's home directory on the remote machine to the /tmp/special directory on the local machine.    Relative file names resolve differently on the local machine than on the remote machine.  On remote machine the /HOME directory is assumed, on the local machine the current directoy is used.    Some common options are:           -p option preserves modification times, access times, and modes from the original file.           -r recursively copy directories    When you specify remote locations in the source and destination, scp will copy from the source to the destination without going through the local host.    To return to the  urlLink main directory for the SSH tutorials .  
     

    
</post>

<date>19,July,2004</date>
<post>


       
      SSH was created by  urlLink Tatu Ylonen  in 1995, OpenBSD picked up on the project in Dec 1999. SSH is intended as a complete replacement of the r utilities (rlogin, rsh, rcp, etc) and telnet. SSH focuses on securing network applications, such as terminal sessions.     SSHd is configured with the /etc/sshd_config file. This file can be used to configure such things as allow/deny hosts, idle timeout, and the type of authentication to be used. SSH reads the $HOME/.ssh/config file and the /etc/ssh_config when it starts up. Any configuration which needs to be done is accomplished with these three files, also the  urlLink MAN pages  will have more information about the SSH program.    The basic command to use SSH is:      ssh -l user@hostname    This will initiate the commands to log in. With SSH2, SSH splits the SSH functions into three separate protocolsusing the Transport Layer Protocol, Authentication Protocol, and the Connection Protocol. More information about the specifics of theses protocols can be found at the urlLink  Information Security web site.   This article has a good overview of the  differences between SSH1 and SSH2.    Once a connection with the remote computer is established then commands can be executed and the results will be returned to the same terminal screen. This brings us to having a connection and being able to run commands remotely. The next couple of days I'll look at secure copying of files, authentication and using Public Keys.    To return to the  urlLink main directory for the SSH tutuorials     
     

    
</post>

<date>19,July,2004</date>
<post>


       
      For the next couple of weeks I want to cover the different aspects of the SSH program, along with some different uses for SSH. The topics I want to cover are as follows:        urlLink Overview       urlLink Secure Copy/ File Transfers       urlLink Public Keys       urlLink Configuration Files         urlLink Compression      X11 Forwarding     Port Forwarding     Security     Troubleshooting    Hopefully I can cover most of the uses of SSH for the average Sysadmin to uses SSh in their everyday environment.   
     

    
</post>

<date>26,July,2004</date>
<post>


       
      This next section will cover when to use compression and when to not use compression with SSH connections.    The two biggest reasons to use compression are when you are connecting through a slow connection, similar to a dial-up or when you have to move a large amount of data form one machine to another machine and the compression will make the data transfer move faster.    There are some reasons not to use compression also, any time one of the systems has a slow processor you want to avoid compression due to the time spent uncompressing or compressing the data. Also if the data is already compressed, using compression will only add the time to compress and uncompress to the process.     SSH uses GNU ZLIB (LZ777) for compression. By default compression is turned off in the  urlLink /etc/ssh/ssh_config  file, but can be turned on at the command line with the command  ssh +C username@hostname . additionally the user can request a compression level at the command line from anywhere 1 to 9, with 1 being the fastest and 6 is the default.    Two good sites for SSH compression are the  urlLink ssh.com  site and the  urlLink University of Cambridge  site.  I know this is a short piece this time but this pretty much covers the compression discussion, remember to look at your environment and what is actually happening before you enable cmpression due to the fact that it doesn't save time all the time.    To return to the  urlLink main directory for the SSH tutorials . 
     

    
</post>

<date>25,July,2004</date>
<post>


       
      Continueing on the SSH topics, the next topic is to look at the configuration files for the SSH program. The global settings for the program can be found in the /etc/ssh directory. The two main files for global settings are  urlLink /etc/ssh/ssh_config  and  urlLink /etc/ssh/sshd_config .      The  ssh_config  file allows you to set options to modify the client programs, some of the more important settings are as follows:          Forward Agent   specifies which conection authentication agent if any should be forwarded default is no there are some nstances where this should be yes though.      Forward X11  automatically redirects x11 sessions to the remote machine, since this should be a server set up this should be left at the default of no.      Password Authentication  specifies to use password authentication.  For strong security this should be set to yes.      Batchmode  used when scripts are used and you don;t want to be supplying a password through the script.   Compression  controls wether compression is used or not, the default is NO.           The next file is the  sshd_config  file which allows you to set options which modify the behaviour of the SSH daemon.           PermitRootLogin  specifies whether root can log in through SSH.  This option should always be set to NO.      StrictModes  specifies whetheter SSH should check the user's permissions in their home directory and rhosts files before accepting logins. this option should always be set to YES.      X11Forwarding  specifies whether X11 forwarding should be allowed on the remote amchine, since this is a server this option should be set to NO.      Password Authentication  specifies whetehr password authentication should be used.  This should be set to YES.      PermitEmptyPasswords  specifies wether the server will allow logging in with null passwords, if you will be using the SCP utility this option must be set to YES.      AllowUsers  specifies which users are allowed to use SSH services, multiple users can be specified.            If you are interested in some of the other features which can be adjusted you can check the man pages which were referrenced earlier in this post.    To return to the  urlLink main directory for the SSH tutorials . 
     

    
</post>

<date>25,July,2004</date>
<post>


       
      Continuing on the SSH topics, the next topic is the use of public/ private keys to enable passwordless logins.      One of the benefits of SSH is the ability for passwordless logins.  This is done through public key exchange.  the  urlLink ssh-keygen  program can be used to generate either an RSA or DSA key.  The -t option allows you to select either RSA or DSA encryption.  The -b option selects the number of bits in the key to create, the default is 1024. The default location for the files created is in the ~Home/.ssh directory.  Stick with the default directory due to the fact that other SSH tools will look for keys in this same directory.    After typing in the command  ssh-keygen -t (rsa/dsa)   you'll be given an option to select a password.  The reason to use a password is to protect your key from theft from someone outside your network.  If your system is in a protected environment usign a password can be tedious.      After the ssh-keygen program generates your key it will then ask you where to store the key, the default will be in the ~HOME/.ssh/ directory.  Then it will ask you for a pass phrase, remember what kind of environment your system is in.  Leaving the passphrase blank will leave the private key unencrypted so you have to secure the file from unauthorized access, on your local machine the permissions should be 0600.  SSH is very strict about the file permissions which are used on your system and on the remote system.    When the ssh-keygen program completes, two new files will have been created ~HOME/.ssh/id_(rsa or dsa) and ~HOME/.ssh/id_(rsa or dsa).pub  the exact file name will depend on wether you selected rsa or dsa encryption.    The final step is to get the keys to the remote system.  the first step is to log back into the remote system and create an .ssh directory in your home directory and verify the file permissions are set up properly.  The command  ssh user@hostname "mkdir .ssh; chmod 0700 .ssh"  does this.  The next step is to copy the file ~HOME/.ssh/id_(rsa or dsa).pub to the remote sytem.  The command  scp .ssh/id_(rsa or dsa).pub hostname: .ssh/authorized_keys2  does this.    The next time you want to log into the remote sytem all that is needed is the command  ssh hostname .  This also works for the scp command.    If there are any problems check the file permissions on both ~HOME/.ssh/* and hostname:~HOME/.ssh.*.  The id.(rsa or dsa) file should be 0600 and only on your local machine an everything else should be 0655 or better.     urlLink Kimmo Suominen  has a good overview of the ssh process.  Also the  urlLink Deadman.org  has a decent overview of the SSH agent.    To return to the  urlLink main directory for the SSH tutorials.   
     

    
</post>



</Blog>