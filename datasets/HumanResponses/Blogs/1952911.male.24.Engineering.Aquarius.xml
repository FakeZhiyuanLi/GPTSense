<Blog>

<date>19,September,2003</date>
<post>

    
       
      Last night I've received about 75 emails with an HTML exploit and warnings about it. Luckily  urlLink POPFile  classified them as spam. Yuck!
       
    
    
</post>

<date>18,September,2003</date>
<post>

    
       
      I've just discovered this service at blogger. Seems nice. Let's see.
       
    
    
</post>

<date>19,November,2003</date>
<post>

    
       
      Bison has at leas two problems with location tracking: empty rhs and error on rhs. A "solution" for the first problem is:    lhs : {@$.first_line = @$.last_line; @$.first_column = @$.last_column; }    A "solution" for the second problem is (you need to do this if reporting error location):    lhs : a b error c {@3.first_line = @2.last_line; @3.first_column = @2.last_column;}   
       
    
    
</post>

<date>19,November,2003</date>
<post>

    
       
      Delimited lists like (a; b; c) often appear in programs, for example when specifing parameters of a function. In order to indentify errors is such lists you can use the LR grammar (eg. bison/flex):    Identifier_List :    TKLP TKRP { cout   | TKLP Sep_Simple_List Item TKRP { cout   | TKLP Sep_Simple_List error TKRP { cout     ;  Sep_Simple_List :    Sep_Simple_List Item Sep { cout   | Sep_Simple_List error Sep { cout   | { cout     ;  Item : TKIDENTIFIER; Sep: TKSEMI;    To obtain a LL grammar (eg.  urlLink ANTLR ) you need to do some transformations since left-recursive rules like (a::=a b | b) are not allowed. 
       
    
    
</post>

<date>29,January,2004</date>
<post>

    
       
      In this post I'll give a brief presentation of some software development techniques that seem to work for me.   Incremental Development  Is it better to have a Big Design Up-front or just be Agile? Both is better. If you have an idea of the overall picture before even writing the first line of code (fiddling around with technologies you'll use or GUI prototypes don't count) then it is less likely that you'll be surprised by some issue that force you to refactor a large portion of the code. The best way to have a good architecture is to study similar existing projects. Experience is a good asset. If you don't have it then at least try to take it from others. But don't over do it. You should not strive for a detailed design because it will surely be wrong. Instead fill in the details as you go.  I prefer a vertical implementation style. First implement the minimum functionality so that you have a program actually running and resembling somehow the final product. Then add features one at a time. Before adding a feature take time to complete your original design sketch up to a satisfactory level of detail. For a object-oriented language satisfactory means specifying all classes and all public members. But adding other details will do no harm.  Do not implement two features in parallel. Focus on one at a time. To do this you need a more or less orthogonal list of features. Finding orthogonal features is the hard part. Whenever you add a feature refactor the code of the other features to accomodate the new one if this is needed. Don't be affraid to refactor. Improving code is always good.  But never leave a feature unfinished. You should never consider a feature finished if there is still something that doesn't work quite right. You also need to finish modifications to other features. Things you leave behind will clutter and later they'll haunt you! Trust me. Whenever you find yourself saying: "I'll do this small tweak later, now I want to move to the next feature.", think also: "If I say this it means I'll never have time to get to it. In the next few days I'll be busy and after that I'll simply forget. So it's better to take now a conscious decision if this thing can be out without repercursions."   Data Structures and Algorithms  Features tend to be associated with algorithms. The algorithms act on data structures. Each program tends to have a central set of data structures and adding features mainly means adding new algorithms for handling those data structures. (Of course, there are also data structures that are local to a certain algorithm/feature.)  It is VERY important to get right the design of data structures on which a lot of algorithms will act! Changing the data structure later means changing all the algorithms already implemented. So do this design in the begining and do it right.  Most of the features you will implement will require the design of at least one algorithm. It might be trivial (more often than not) or it could be a really smart one. In whatever category it is pay close attention to its  urlLink complexity . Then plug in some numbers and see which choice is acceptable in terms of space and time and also easiest to implement and maintain. Choose that one! If profiling shows you are wrong, and the program is to slow (or too memory hungry) then your algorithm inventory will help you choose a better one.  Does it pay to optimize away constant factors? Usually not! But never be rigid; take rules of thumbs (like the ones presented here) with a grain of salt. Sometimes you DO need to optimize for constant factors. But this is a rare situation.   Test Suites  After you decide what is the next feature, even before you choose the algorithm (but usually after you have the data structures) you should generate a test suite for that feature. Even mathematicians do work by trial and error. There is nothing wrong in using a limited set of tests that could never proove your implementation correct (Dijkstra said the last part). What is important is that very often just trying things out is a revealing experience. It shows bugs and stimulates intuition.  Rigouros reasoning should temper this process. So, even if you create tests before implementing any new feature, don't be sure your code is 100% correct. Knowing this makes you smarter, not the other way around. ("People ask me very often how can I live without knowing. I don't know what they mean. It's simple, I do it all the time."  urlLink Feynman .)   Specification and Design Documentation  Ok. So now you know what the next feature will be and how it fits in the overall picture. You also know what data structures and algorithms you'll use. Write it down! Make a specification. But don't stop here. Describe also the structure of the code that you WILL write. Often you'll use diagrams to do it. For object-oriented design there is a well developed graphical language: UML.  When you write this document you'll often notice little things that you missed. Go back and revise your attack plan. Repeat. When you feel comfortable with the document you just wrote, and only after that, it's time to go hit the keyboard.   Logging  Before discussing about code I shall make a short detour. There is a feature that is special. It is special because it helps the development process itself. This is a good enough reason to include this feature into the big picture and also to make it one of the first on your chronological feature implementation list.  It is logging. This feature lets you know what is happening inside the program while it is happening. Logging should be off by default but it should be easy (even for end-users) to turn it on in order to diagnose a problem. Programs having a GUI are no exception. Their internals should be as visible as possible when running in debug mode.  For more about this read the transparency and discoverability chapter in  urlLink The Art of UNIX Programming .   Assertions  Assertions are very important to help the understanding and prove the correctness of an algorithm, especially when it is expressed in an imperative language (eg. BASIC, C/C++, Java, FORTRAN). They are propositions that are true at certain points of execution. The code between two assertion batches always presume the above assertions to be true and promise that the below assertions will be true. By explicitely checking assertions you do two things:       Help the guy who reads the code understand it .     Help the guy who debugs the code (probably you) pinpoint the piece of code that does not work correctly.     Assertions are old. They were used even by Turing. Knuth says in The Art of Computer Programming that, probably,  assertions are very effective because they reflect the way humans think about algorithms. A special case of assertions are pre-conditions and post-conditions. These are simply the first and, respectively, the last set of assertions in a function. You should strive to always specify these, at least in comments.  At least in comments? Why not in code? (eg. by using #include &lt;assert.h&gt; in C). It's simple. Not all assertions are easy to code. Those which are not easy to code should not keep you from working. Just write them in comments using whatever abstractions you like (and the language at hand doesn't provide).  Just a short note. UML has something named "constraints" which resemble somehow the notion of assertion. Check them out!    Comments  Ah.. Comments. They are SO important. In  urlLink literate programming  these are taken to an extreme: the code becomes embedded in a story. What a wonderful way of publishing articles about algorithms, data structures and such! I'm afraid that real life is not so kind on verbosity. In fact, another way to put it: when you do trivial stuff (algorithms) it's not worth writing too much about them because they'll be easily understood. On the other hand, in an article you probably present something smart so the reader will need all the help he can get.  In writing comments it's probably a good idea to follow Dijkstra's notion of politeness: "if you can spend 20min to spare each of your readers 2min then it is worthwhile to do so".  Some other good rules of thumbs are:        Write comments delimiting code sections before the code itself. The places where you put these comments are usualy also a good place to put assertions.       Whenever you read some code and don't understand it quickly add comments explaining it (after you do manage to understand it).       Comment every important syntactic element. This means: classes, modules, functions, variables. Some trivial variables, like the i counter are usually not commented.      Peer Review  (Professional) communication with collegues is a good way to turn your workplace into a place where you like to be. Asking them to review your work is likely to improve it. Never receive or give criticism directed to a person. The critique should always be directed at ideas.  When to ask for help? In my opinion you should do it in a formal way at least two times per feature. Once after you wrote the specification and design document and once after you finished coding. Inbetween you should strive for a continous and healthy communication with your collegues and with your client.  The effectiveness of peer review has been showed by the longstanding tradition of scientific journals. When the review process is rigouros and taken seriously the quality is almost always better.   Tools (example)  In real life you need to be pragmatic. When deciding if you will apply a "Rule of Thumb" you should put in balance its advantages and its disadvantages. Whenever a Rule of Thumb tells you to do something that you usually don't do an important concern is if the spent time will pay of. Well, if the time spent is short it has more chances to pay off :) Here is where the TOOLS come into the picture.        Nothing compares to a good editor. The open source I like is  urlLink JEdit . The other ones are  urlLink IntelliJ IDEA  for Java and, of course o:)  urlLink Visual Studio .NET .        urlLink Poseidon  is a tool that helps you create UML models. It is a very good tool to assist you in specification and design.        urlLink Doxygen  and  urlLink javadoc  are tools that automatically generate API documentation from code comments.        urlLink cccc  is a tool that computes code metrics. You will have some objective measures of how well commented your code is, how complex the control structure is,     how modular it is, etc.        urlLink CVS  is a versioning control system. Every developer should feel like suffocating without such a system.     Finally I'll put here a  urlLink link  to a MIT course with much more information. It is however more detailed and hence you will need to devote more time to read it.   Disclaimer  What I described here is more or less a guideline process/methodology. Always feel free to diverge when a particular situation asks for it. 
       
    
    
</post>

<date>24,January,2004</date>
<post>

    
       
      I have recently updated my  urlLink homepage . Check out the  urlLink links  section.
       
    
    
</post>

<date>20,January,2004</date>
<post>

    
       
      These are links to C++ library references:        urlLink Dinkumware C++ Library Reference   (a very good reference)      urlLink C++ Reference   (not sure about the correctness of this one)      urlLink C++ Nov 1997 Draft standard         (or in  urlLink PDF  format)     And here is a study of  urlLink C++ performance .
       
    
    
</post>

<date>16,January,2004</date>
<post>

    
       
      When a language is used over a long period of time patterns of good usage emerge. When they are a whole application level they are called architectural patterns. When they concern a component they are called  urlLink design patterns . When they are about a few lines they are called idioms (if I remember correctly I saw this idea first in Andrei Alexandrescu's  urlLink MC++D ). Sometimes these patterns are included in future language designs and this takes the form of an apparent limitation on the old, more flexible, language. An example is the transition from C++ to Java.  I'd like to present here in a few words a C++ idiom. It is call the &quote;hoisting&quote; idiom. The idea is very simple:  whenever a piece of code can be shared do so; don't repeat it, even if you don't do it manually . IMO the last part, &quote;even if you don't do it manually&quote;, is applicable in two situations: (1) when you want to avoid relying on such tools, and (2) when the tools don't do the replication in a &quote;smart&quote; way.  Templates in C++ turn the compiler in a veritable code replicating machine. Their syntax is verbose (compared to functional languages). However they are a very good productive tool. They also tend to speed up run times because part of computation is moved to the compilation phase. For example you can use it to precompute look-up tables at compile time:    template &lt;int N&gt; class Fibonacci { public:     static const int value = Fibonacci&lt;N-1&gt;::value + Fibonacci&lt;N-2&gt;::value; };  template &lt;&gt; class Fibonacci&lt;1&gt; { public:     static const int value = 1; };  template &lt;> class Fibonacci&lt;0&gt; { public:     static const int value = 0; };  int fib_lookup[10] = {     Fibonacci&lt;0&gt;::value,      Fibonacci&lt;1&gt;::value,      Fibonacci&lt;2&gt;::value,      Fibonacci&lt;3&gt;::value,      Fibonacci&lt;4&gt;::value,      Fibonacci&lt;5&gt;::value,      Fibonacci&lt;6&gt;::value,      Fibonacci&lt;7&gt;::value,      Fibonacci&lt;8&gt;::value,      Fibonacci&lt;9&gt::value; };    (after this and my last posts you might think that I'm obsessed with fibonacci numbers; I'm not :) )  But there are also problems. It happens that very often templates lead to code bloat. By this I mean that the executable gets very large. Compilers are not very smart today to be able to replicate only what is necessary and share code between different template instantiations.  Instead you need to do it by hand. A common situation where this is needed is when different data types share the same machine represantation. This is the case with pointers: T* will always be represented like S* no matter what T and S are. It also happens for int and long for most machines.  The idea is to specialize the template for one of the types and to use this specialization as a base class:    template &lt;typename T&gt; class vector {    // general implementation };  template &lt;&gt; class vector&lt;void*&gt; {    // implementation for void* (possibly with optimizations) };  template &lt;typename T&gt; class vector&lt;T*&gt; : public vector&lt;void*&gt; {    // delegate most of the functions to base class };    Perhaps I'll give more details in a subsequent post. Anyway, in the meantime you might want to search for posts on the subject from Francis Glassborrow (a member of C++ Standard Comitee) in this  urlLink group . 
       
    
    
</post>

<date>13,January,2004</date>
<post>

    
       
      Memoization is a name for caching the results of a function. If the result of a function depends only on its arguments (it does not look to other external variables, does not use static local variables etc.) then you can attach a cache that maps function parameter values to the results. Doing so can dramatically improve the computing time for some recursive functions because complexity changes - usualy from exponential to polinomial. In an imperative language you would do something like:    map&lt;int, int&gt; fibonacci_cache; int fibonacci(int n) {    if (fibonacci_cache[n] != 0) return fibonacci_cache[n];    if (n == 0) return 0;    if (n == 1) return 1;    return (fibonacci_cache[n] = fibonacci(n-1) + fibonacci(n-2)); }    This solution has complexity O(n log n), much better than O(2^n) without memoization. If you use a regular array instead of a map (balanced binary tree) as the cache you can even go to O(n). Of course, there are more efficient ways of computing fibonacci numbers, but here I discuss only memoization.  An interesting problem is how to do memoization in a pure functional language (that is, without side-effects). A solution is to pass the cache as a parameter and also return it. This solution was suggested by (L.x.xx)(L.x.xx) at  urlLink TopCoder  RoundTables forums; he said the idea came from how side-effects are represented in denotational semantics. Here is an example implementation in OCaml (thanks to bogklug for some improvements of the code):    module OrderedInt = struct   type t = int   let compare x y = compare end;;  module AssocInt = Map.Make (OrderedInt);;  let rec fibr = function   | 0, mem -> 0, mem   | 1, mem -> 1, mem   | n, mem ->       try AssocInt.find n mem, mem with       | Not_found -> 	  let res1, mem1 = fibr ((n - 1), mem) in 	  let res2, mem2 = fibr ((n - 2), mem1) in 	  res1 + res2, AssocInt.add n (res1 + res2) mem2 ;; let fib n = fst fibr (n, AssocInt.empty);;    Something similar can be done in any pure functional language. Some of them, like  urlLink Haskell , have something called monads (or triples) which come from  urlLink category theory . Monads provide an alternative way of doing memoization. Unfortunatelly I don't understand this yet. But I'll come back when I will.  
       
    
    
</post>

<date>12,January,2004</date>
<post>

    
       
      Just wanted to archive a nice  urlLink list  of links to literature (mainly books) on the web. 
       
    
    
</post>

<date>12,January,2004</date>
<post>

    
       
      I've heard often about "tail recursive" functions but never really tried to understand them. However, recently I've been bitten by not knowing what they are. I wrote the following OCaml code:    let rec apply_n_times n f x =     if n = 0 then       x    else       f (apply_n_times (n-1) f x);;    Now, that's not tail recursive, as bogklug at  urlLink TopCoder  noted. With this version my program ended with a stack overflow error. The problem magicaly disappears in the tail recursive version:    let rec apply_n_times n f x =    if n = 0 then       x    else       apply_n_times (n-1) f (f x);;    It may seem like a trivial change but think about how would you transform these functions into loops. For the first one it is not obvious at all. You would probably need a stack if you don't do some VERY smart optimizations. But the second one is simple; in C++:    while (true) {    if (n == 0) return x;    x = f(x);    n = n-1; }    It is almost the same code. The structure is: stop condition followed by recursive function arguments (n, x) recomputation. This transformation into a simple loop with no stack is possible for every tail recursive function. A general form for a tail recursive function is:    rec_f(a1, ..., an) =     if stop(a1, ..., an) then       base_case(a1, ..., an)    else       rec_f(f1(a1, ..., an), ..., fn(a1, ..., an))    For some functions it is not obvious how you can express them as such. For example the simple implementation of factorial is NOT tail recursive:    let rec fact n =    if n = 0 then       1    else       n * fact (n-1);;    But it can be transformed by introducing an auxiliary function that looks like the recursive call: fact_aux(m, n) = m * n!, and expressing the factorial as n! = fact_aux(1, n). Here it is:    let rec fact_aux m n =     if n = 0 then       m    else       fact_aux (m*n) (n-1);; let fact n = fact_aux 1 n;;    I'm guessing this technique can be applied to more general situations as well. 
       
    
    
</post>

<date>11,February,2004</date>
<post>

    
       
      No post in a long time... A link to  urlLink EWDs  deserves an entry in this blog so I won't foget about them again!
       
    
    
</post>

<date>12,March,2004</date>
<post>

    
       
       urlLink Here  is an interesting graph problem. Solution coming soon (hopefully!).
       
    
    
</post>

<date>12,April,2004</date>
<post>

    
       
      Just random.   Finish or fail early . I read once that successful people are those who try many things. They fail a lot of times but they fail early and therefore most of the time is spent on successful projects. Failures can be good because you learn from them. But they don't make you successful. So, measure your success by counting things that you finish. You can even take advantage of the human nature: reward yourself with entertainment after you do something useful.   Strict rather than lazy  (evaluation). This is probably a matter of style. The one that suits me is strict. Always pay attention and observe problems as they appear. As soon as a problem surfaces asses it: should I try to solve it? If yes, then get to it rather quickly, otherwise you will either forget or it will be too late. If no, then just move on. Try to solve problems as they appear not when you need the solution.   Maintain focus . You are more efficient when you devote batches of time to each problem instead of trying to multitask. As a rule of thumb, each day focus on one or at most two problems.   Play around vs. think it thru . Is it better to just try out possible solutions or to take a more theoretical approach? Do both: play a little to feed your intuition, then make progress with your brain, then test.   Elegance, simplicity and abstraction . Always strive for elegance and simplicity: the way you talk, the way you dress, the way you work, etc. Simplicity is usually a child of abstraction: finding the essential features of objects involved. Abstraction = less features = bigger class of objects. Abstraction is the key of harnessing complexity! Elegance is beautiful simplicity.   Formal and informal writing . Articles, books, letters, emails are examples of formal writing. Each of them should be simple, elegant and easy to understand by someone with the appropriate background. So you need to actively think about the "appropriate background" and re-read each piece of formal writing at least two times before releasing it to the world. Ideally you should re-read until you find no other improvement. Writing done for aiding your memory (e.g. while trying to solve a problem) can be more "confused" without causing damage; it can even be benefic. Of course, the confusion should be kept to an acceptable level.  Disclaimer: I do not respect the rules above. I try to. 
       
    
    
</post>

<date>12,April,2004</date>
<post>

    
       
      Finally I post the  urlLink solution . It's not very detailed but I think it can be interesting.
       
    
    
</post>

<date>28,May,2004</date>
<post>

    
       
      In an  urlLink email  sent to Andrew Tanenbaum,  urlLink Alexey Toptygin  claims he was hire by  urlLink Ken Brown  to find code similarities between Minix and Linux. The  urlLink results  showed only 4 similarities of which 3 are imposed by programming standards (C, POSIX) and 1 is related to both MINIX's and LINUX's filesystems being Unix-like.  Ken Brown is also president of the  urlLink Alexis de Tocqueville Institution . The conflict between Tanenbaum and Brown started when Tanenbaum  urlLink refuted AdTI's claims  that  urlLink Linus Torvalds didn't write Linux .  Linus reportedly responded to AdTI's claims: "Okay, I admit it. I was just a front-man for the real fathers of Linux, the Tooth Fairy and Santa Claus."  More info can be found on  urlLink Groklaw.net .
       
    
    
</post>

<date>26,May,2004</date>
<post>

    
       
         Write a function that computes the N-th fibonacci number.  Work in base 7: addition, multiplication, division.  You are given a tree as a list of edges, each described as a line "&lt;from&gt; &lt;to&gt;" in the input file. You are also given a set of interesting nodes from the console (cin). Find a common parent of the interesting nodes that is as far as possible from the tree's root.  Compare a linked list structure with an array. Example: ArrayList and LinkedList in Java.  Implement remove_if  Count the number of set bits in a 32b integer. Optimize for time/space.  Implement next_permutation.  Print the data in a binary tree level by level.  Write a function that generates all subsets of a set. Now write a function that generates all subsets for which the product of elements is less than a limit. Optimize for speed.  Compare two languages.  When should a destructor be virtual in C++? What is a &quot;virtual constructor&quot;?   
       
    
    
</post>

<date>26,May,2004</date>
<post>

    
       
      Nice problem via some Microsoft blog (can't remember which):  You are given an array with an even number N of integers. Suffle the array according to the rule A[i] = a[(i%2)(N/2) + i/2], where a[i] and A[i] are the values of the i-th location before and after the shuffle (zero-based index). Do it in O(N logN) time and O(1) space.  Example: [0, 1, 2, 3, 4, 5] becomes [0, 3, 1, 4, 2, 5] NOTE: you do not know anything about the values in the array (i.e. 0, 1, 2,... are specific to this example) 
       
    
    
</post>

<date>21,May,2004</date>
<post>

    
       
       urlLink This  is an online software engineering journal. OO oriented and pretty interesting!
       
    
    
</post>

<date>07,May,2004</date>
<post>

    
       
      An nice  urlLink article  arguing that source code is the design. It is well written. I agree with the fact that low-level work might reveal problems in the high level design; this should lead to the refactor of the top-level design rather than doing local "hacking". I do not agree that formal proofs are inefficient. 
       
    
    
</post>

<date>07,May,2004</date>
<post>

    
       
      As you might know from an earlier post I am not a fan of literate programming. I think it is a good tool for preparing documents that clearly present an algorithm or a data structure. But that's it. The code for a big (>10000 lines) program is not read like a book. Well, maybe like a reference book but, certainly, not like a literature work. It doesn't feel right to organize it into chapters, sections, paragraphs. However...  When writing a public document (like an article, a book, etc.) it is almost required to read the document several times and scan for errors. Errors can be at various abstraction levels: conceptual, presentation style, phrase semantics, syntax, spelling. If the document is large you probably want to do this after finishing each section; and, in the end, once again for the whole document, this time looking for more abstract error types.  What occured to me is that the above can be also said about code review sessions. So, although I think that a program's code should be more flexible than a book's format imposes, I do think that using good review practices helps. 
       
    
    
</post>

<date>04,May,2004</date>
<post>

    
       
      This is a short entry about a specific scoping issue. Consider this code:    struct A {int a}; struct B {int b;}    If A == B there is a name clash. If a == b there is no name clash because a and b have different scopes. Programers are used to ensure A != B but not used to ensure a != b (they even find it strange in other programming languages: see Caml, Vera, etc.). Now consider this code:   enum C { c }; enum D { d };   Now both C == D and c == d will cause a name clash. This is why some "coding style solution" is needed. An option is:   enum C { C_c }; enum D { D_d };   Another option is:   struct C { enum { c }; }; struct D { enum { d }; };   However the name of an enum (C/D) behaves like the name of a struct. It is one of the reasons most coding standards use the same case convention for enum and struct names.  
       
    
    
</post>

<date>04,May,2004</date>
<post>

    
       
      Let's suppose we have a hierarchy of classes that provides a "virtual copy constructor":    class A { public: 	// This function returns a pointer to a copy of this object 	virtual A* Clone() const; };  class B : public A { public: 	A* Clone() const; };  // class C : public A // ...    We would like to let a smart pointer do the memory handling.  Obtaining a copy of an object can be done like this:    MySmartPtr&lt;A&gt; a(new A()); MySmartPtr&lt;A&gt; b(a-&gt;Clone());    All is nice and clean. But what do you do if you want to call a function f and you want to send it a copy of a AND you do not need (locally) a name for this copy?    // void f(MySmartPtr&lt;A&gt; x); MySmartPtr&lt;A&gt; a(new A()); f(MySmartPtr&lt;A&gt;(a-&gt;Clone));    I have written MySmartPtr&lt;A&gt; because the constructor of a smart pointer is usually explicit: you don't want to acquire ownership without explicitly saying so. However the cloning method is a special case. Here you do want to obtain a smart pointer when you say "Clone". What to do?  One solution is to change the Clone methods to return MySmartPtr&lt;A&gt;. This is too intrusive. Classes that have a functionality related to, say, representing accounts or language constructs should not worry about memory handling. Better is to let the smart pointer act as a proxy for the Clone method.     template &lt;typename T&gt; class MySmartPtr { 	// ... public: 	MySmartPtr&lt;T&gt; Clone() const 	{ 		if (obj == NULL) return *this; 		else return MySmartPtr&lt;T&gt;(obj-&gt;Clone()); 	} };    The result is that you write:    MySmartPtr&lt;A&gt; a; f(a.Clone());    This can be generalized by using a policy to specify the method by which the clone is obtained. In the code above it is always done by calling a method named "Clone". Again, this is unrealistic: we should not change classes to "fit" to our smart pointer. But I will not discuss this further.  Instead I want to discuss an alternative to the smart pointer member function, namely a friend function. If you have implemented the smart pointer methods in a separate file and you use explicit instantiation as a workaround for the lack of support for  export  then this solution might be of interest. When Clone is a member function then it is always instantiated and you cannot have smart pointers to classes that do not implement Clone (again, if you do not use policies with static assertions).  The friend function alternative looks like this:    template &lt;typename T&gt; class MySmartPtr;  template &lt;typename T&gt; MySmartPtr&lt;T&gt; Clone(const MySmartPtr&lt;T&gt;& ptr) { 	// do the same as in member function }  template &lt;typename T&gt; class MySmartPtr { public: 	friend MySmartPtr&lt;T&gt; Clone&lt;T&gt;(const MySmartPtr&lt;T&gt;& ptr); 	// ... }    Now you type:    MySmartPtr&lt;A&gt; a; f(Clone(a));    I've been very sketchy in this entry but I don't have much time :(  
       
    
    
</post>

<date>29,June,2004</date>
<post>

    
       
      This entry contains a list of sites about driving. It is a bit different from the rest and I'm not sure if a better place to post this is  urlLink Bits of Reality  blog... but what the heck: it doesn't make sense to spend too much time thinking where should I post this.  The list.      urlLink Modern Racer tips    urlLink Driver reaction time    urlLink Smart driving    urlLink Driving on the left side    urlLink Aims    urlLink Performance driving    urlLink Safe driving    urlLink Drive and stay alive  is a small encyclopedia   urlLink Reaction time     That's enough. 
       
    
    
</post>

<date>28,June,2004</date>
<post>

    
       
      I have recently tooked a  urlLink test . My results are  urlLink here . You can also view an  urlLink explanation . Politicians with views similar to my views are Dalai Lama and Nelson Mandela.
       
    
    
</post>

<date>24,June,2004</date>
<post>

    
       
      I am curently reading the book  urlLink The Pragmatic Programmer , which was recomanded on  urlLink Eric Gunnerson blog . I have just read a section about  urlLink The Law of Demeter  and realised that I often break it.  This law says that a class method should only call methods of: (1)  this  object, (2) objects passed in as parameters, and (3) objects locally created (including on the stack). This means that code like  obj.f().g()  or  A* objA = objB.GetA(); objA->DoIt()  are breaking the law. The authors suggest two possible solutions.     [look at first example] If  obj  is passed in as a parameter then it might be possible to simply pass in  obj.f()  and simply call  g() . This might not be possible in some circumstances, for example if you also need  obj.h() . In these cases you...  [look at second example] Write a wrapper function  DoIt()  in the class of  objB  that simply forwards the request to  objA . This way you can write simply  objB.DoIt() .    Why bother? Well, from a theoretical point of view you minimize the coupling between modules. Why? Well, let's look at the second example. The class of  objB  looks like this:    class B {    // ... public:    A* GetA() const; };    In other words it is already coupled to class A since it contains a function that returns a pointer to A. Adding a wrapper  DoIt  method does NOT increase the number of classes on which class B depends.    // B.hpp class B {    // ... public:    A* GetA() const;    void DoIt() const; };  // B.cpp void B::DoIt() const {    GetA()->DoIt(); }    However writing such a wrapper will decrease the number of classes on which the client of class B depends. In the original version it depended on class B and class A. With the  DoIt  wrapper in place it depends only on class B.  But writing such wrappers is cumbersome and boring. Does it really pay off? I think that it is a situation very similar to writing properties (C#) or acessors (Java/C++) and accessing members thru them. If you found situations in the past when you said "Why didn't I used an accessor here?" then you are likely to find the Law of Demeter useful.  Avoiding call chains like  obj.f()->g()[3].h()  makes the code more readable. It also brings down compilation times.  I wish there were some tools to help with this by automatically doing the refactoring illustrated above. 
       
    
    
</post>

<date>21,June,2004</date>
<post>

    
       
      The Integer Sequences entry has a link to OEIS. Now I have my name  urlLink immortalized  there :) 
       
    
    
</post>

<date>17,June,2004</date>
<post>

    
       
      Remember high school days with all kinds of integer sequences? Do you remember a closed form formula for the sum of the first N integer numbers: 1+2+...+N? Do you remember the sum of the first N squares: 1+4+9+...+N^2? If you ever need to answer such questions some possible approaches are:      Use various sum manipulation rules and (maybe) some sums whose closed-form you already know to find the answer by "construction".   Compute the first few numbers of the sequence, guess the answer by using various heuristics and prove by induction. An example "heuristic" is transforming the sum into an integral, computing the integral and then search for answers with a similar form. Eg. by knowing that integ(x^n) is proportional to x^(n+1) you can guess that 1+4+9+...+N^2 has the form a+bN+cN^2+dN^2.   Or, if you are in a hurry, use the  urlLink On-line Encyclopedia of Integer Sequences  to find the formula from the first few terms :). As a bonus you will also get references to articles and/or web sites that give more details.   
       
    
    
</post>

<date>15,June,2004</date>
<post>

    
       
      The  urlLink Great Computer Language Shootout  has a makeover and an upgrade. According to the importance I assigned to CPU/memory/LOC   urlLink these are the rankings  (higher score = better). The funny thing is that I'm just beginning to like  urlLink Ocaml . In any case, you may notice that C++, unlike Java, has a honorable rank. 
       
    
    
</post>

<date>02,June,2004</date>
<post>

    
       
      Today I have spent almost 5 hours trying to draw some useful UML diagrams using  urlLink Poseidon . I was aware that it is a very slow and memory hungry beast but, in general, I can live without speed; even if I don't like it. Anyway, the lesson I have learned today is: if the input of your routine is not meeting the preconditions then fail and do so with bells and whistles. Tell your client what is wrong with the data. Do not try to $quot;correct&quot; the situation by second guessing what the he really meant. This will only annoy him further.  Let me give you an example. Three out of those five hours were spent trying to convince Poseidon to write a constructor with the signature  WordDictionaryEnumerator(dict : WordDictionaryTemplate, initialNode : LexicalTree) . For some (yet unknown) reason every attempt of mine to create such a constructor resulted in the creation of the contructor  WordDictionaryEnumerator()  and  no  error message to hint me to what exactly Poseidon doesn't like. I will never use it again!  I'll try  urlLink Visual Paradigm  to see if it is better. 
       
    
    
</post>

<date>01,June,2004</date>
<post>

    
       
      I have just read a paragraph from  urlLink The Pragmatic Programmer  that I really enjoyed so I want to share it. On the net there is an  urlLink interview  with the authors on the particular subject of  broken window theory . It resonates well with my thoughts on software development. 
       
    
    
</post>

<date>23,July,2004</date>
<post>

    
       
      There are artists that sound better live and artists that sound better on record. Last night I found out that  urlLink Pink  is in the former category. The concert was great! Aside from her songs she did 4 Non Blondes - What's up, and a compresed version of about 4 Janice Joplin songs (like Bobby McGuire). Because there were only old buildings around ( urlLink Brasov, Piata Sfatului ) you get the feeling you are in the past. Just like in the commercial for Pepsi with Pink, Beyonce and Enrique that started the show.    
       
    
    
</post>

<date>12,July,2004</date>
<post>

    
       
      Learn java and have fun:  urlLink robocode .
       
    
    
</post>

<date>08,July,2004</date>
<post>

    
       
       urlLink Brainbench  is free from 1 July to 14 July. This means that we are halfway right now. So it's time to make a short assesment of my test results. I have expected to score at 80 percentile in all tests and I would have been very happy with 90 percentile. But life is cruel. Here are the ones below what I have expected:       40% Business Communication (weak areas: electronic and nonverbal communication)    48% Listening Skills    68% Programmer/Analyst Aptitude    74% Written English (weak areas: articles, misused words, etc.)    78% Computer Fundamentals (Win 95/98) (weak area: win 95 :) )    Here are the ones of which I am content:       84% Technical Writing    85% MS Access 2000 Fundamentals    And there are some with really good scores:       92% C    93% Math Fundamentals    93% XML Concepts    97% Java 2    97% XML    98% OO Concepts    98% Programming Concepts    99% C++    The whole distribution is revealing. Most of the tests on which I got high "grades" (C++, XML, Java 2) are about knowing lots of information or.. knowing how to find it. I must admit that for the XML and Java tests I knew the answer for about 15% of the questions. However, 3 minutes were plenty to find the answer (usualy thru google). Note that this is not against brainbench rules. This probably means that I am good at locating and parsing information.  The sadest experience was the score I got in the "aptitude test". This time the main problem was not the information quantity but rather how well you can handle it. And I did  much  worse than I expected. Most of the questions were relatively easy but I missed a lot of them feeling that I would have needed just a bit more time. But speed comes with practice so I guess this shows that I have exercised my problem solving skills not nearly enough. I have spent more time trying to understand masses of information organized by others, including problem solutions, but I have rarely sat down and tried to solve a problem by myself.  I need to remedy this.  
       
    
    
</post>

<date>07,July,2004</date>
<post>

    
       
      &quot;It [the confrontation with the programming task] has already taught us a few lessons, and the one I have chosen to stress in this is the following. We shall do a much better programming job, provided that we approach the task with a full appreciation of its tremendous difficulty, provided that we stick to modest and elegant programming languages, provided that we respect the intrinsic limitations of the human mind and approach the task as Very Humble Programmers.&quot; [October 1972].  This is the conclusion of Dijkstra's Turing Award Lecture. As usual, a very convincing piece. In fact, I think it contains the best argument I've seen that C++ is a  bad  language for being productive, even though it was written more than 10 years before C++'s conception (1983). 
       
    
    
</post>


<date>30,January,2004</date>
<post>


       
      It's kind of funny to see a presentation about how too speed up open source adoption on a  urlLink microsoft site .
     

    
</post>

<date>29,January,2004</date>
<post>


       
      I've read once that  urlLink spam  is profitable if 1% of people read and respond. Help make spam a profitable business :p
     

    
</post>

<date>28,January,2004</date>
<post>


       
       
     

    
</post>

<date>27,January,2004</date>
<post>


       
       urlLink   Which OS are You?   The strange thing is that I never heard of it..
     

    
</post>

<date>26,January,2004</date>
<post>


       
      At  urlLink Flabber  you can find links to various crazy visuals (eg. a fire-resistant man, naked volley).
     

    
</post>

<date>26,January,2004</date>
<post>


       
      I wanted to be like win2k....:(   urlLink    Which OS are You? 
     

    
</post>

<date>24,January,2004</date>
<post>


       
      How would you sell ice to native alaskans, how would you convince Google to switch from Linux to Windows and  urlLink other  brain teasers from Microsoft.  
     

    
</post>

<date>23,January,2004</date>
<post>


       
      Microst decided to sue Canadia 17 years old Mike Rowe for his domain:  urlLink www.mikerowesoft.com . Read about it in  urlLink The Register .
     

    
</post>

<date>22,January,2004</date>
<post>


       
      "Winter is not like summer..."  urlLink http://www.edu.gov.nf.ca/snow/photo.htm 
     

    
</post>

<date>16,January,2004</date>
<post>


       
      Want to see some real cool chicks? Check  urlLink The Swan Lake ballet 
     

    
</post>

<date>15,January,2004</date>
<post>


       
      Want to kill some time? Put your headphones on or turn the speakers real LOUD. Here's some insane fun: Badger, badger, badger... mushroom  urlLink Badgers I   urlLink Badgers II   urlLink Lord Of The... Badgers 
     

    
</post>

<date>15,January,2004</date>
<post>


       
      Think you saw too many scifi movies? Steve Mann (Toronto, Canada) is really into being a cyborg:  urlLink CNN Link 
     

    
</post>

<date>15,January,2004</date>
<post>


       
      Hello world!
     

    
</post>

<date>20,February,2004</date>
<post>


       
      Romania was  urlLink listed for sale on EBay . Wanna buy?
     

    
</post>

<date>13,February,2004</date>
<post>


       
      Beach tennis and  urlLink others .
     

    
</post>

<date>12,February,2004</date>
<post>


       
      How about switching from the current 24-hour days to 28-hour? As I went through the  urlLink advantages  I could't help but love it!
     

    
</post>

<date>11,February,2004</date>
<post>


       
      Don't you just  urlLink  love beer  ?
     

    
</post>

<date>06,February,2004</date>
<post>


       
      Images and movies generated with computers:  urlLink http://www.irtc.org/ 
     

    
</post>

<date>05,February,2004</date>
<post>


       
      What is your  urlLink typing speed ? Mine is around 32 words per minute. This means 80% of the people at TyperA are better! No, I'm not a mouse person.
     

    
</post>

<date>02,February,2004</date>
<post>


       
      Check your windows.h file, especially the last 7 lines: - in VS .NET:  /* Leave 4514 disabled.  It's an unneeded warning anyway. */ - in VS 6.0: /* Leave 4514 disabled.  It's a stupid warning anyway. */
     

    
</post>

<date>02,February,2004</date>
<post>


       
      Win2000 is really secure!!! Haven't you heard of the  "Your Password Must Be at Least 18770 Characters and Cannot Repeat Any of Your Previous 30689 Passwords"  error message?  urlLink MS-KB276304 
     

    
</post>

<date>31,March,2004</date>
<post>


       
      Get the girl you want from  urlLink here . 
     

    
</post>

<date>18,March,2004</date>
<post>


       
       urlLink Ever wondered what enables Google? 
     

    
</post>

<date>16,March,2004</date>
<post>


       
       urlLink      urlLink   
     

    
</post>

<date>16,March,2004</date>
<post>


       
      This is  urlLink something  I found while searching &quot;suck&quot; with AskJeeves. What is the link between &quot;suck&quot; (what I searched) and &quot;swallow&quot; (what I found) is still a mystery to me..
     

    
</post>

<date>09,March,2004</date>
<post>


       
      It's been a while but... check this out!   urlLink   
     

    
</post>

<date>31,May,2004</date>
<post>


       
      Kathleen Laraia McLaughlin is the author of this  urlLink Romanian Photo Documentary Work . The documentary was awarded with Fulbright and IREX grants. More pictures from her trip to Romania can be seen on  urlLink Leafpile  and  urlLink Shades of Romania .  A short excerpt from the  urlLink Artist's Statement :       My purpose is to capture and convey images of their way of life before it becomes further compromised by globalization. In our modern world, we often feel we have "lost" something important, something precious. Though they do not know it now, these peasants are losing their customs in the same way our forebears lost theirs. They do not see themselves as beautiful or special, because they feel poor and ordinary. But I hope to show they embody beauty because of the way they have spent their days walking paths trodden by their grandparents. Because of the way their lives have become well worn like an old wooden spoon.     Story was also featured on  urlLink Flabber.nl 
     

    
</post>

<date>28,May,2004</date>
<post>


       
      Still not comfy with your phone? Why not try this  urlLink 1940's telephone manual ?  Courtesy of  urlLink Boingboing.net 
     

    
</post>

<date>27,May,2004</date>
<post>


       
      I definitely have to  recommend  mention using  urlLink w.bloggar . It integrates very nicely with  Blogger.com and  RssBandit.  Update: I couldn't get w.bloggar to post titles properly with my Blogger.com account. Will have to dig further...
     

    
</post>

<date>26,May,2004</date>
<post>


       
            Innovation Futures is a predictive market system that enables technologyreview.com users to predict the outcome of events related to emerging technologies.    Set up your account at  urlLink http://trif.technologyreview.com/bk/  and see what your trading skills and tech knowledge are.
     

    
</post>

<date>26,May,2004</date>
<post>


       
      comments are good. comments are nice. comments makes you feel warm and fuzzy inside.. ok, that's enough! anyway, go  urlLink here  and drop me a note ;). BTW, my rss feed is there: I'm just too lazy to modify the template.. 
     

    
</post>

<date>25,May,2004</date>
<post>


       
      Definitely this blog will move ASAP. I'm still looking for a reliable hosting with PHP and MySQL so that I can install WordPress ;) This will mean COMMENTS ;)  I still don't know when the move will happen but I wouldn't count on this weekend.
     

    
</post>

<date>25,May,2004</date>
<post>


       
      Take a look at  urlLink RssBandit .
     

    
</post>

<date>25,May,2004</date>
<post>


       
      CNET news.com features  urlLink an article  on  urlLink Pluck , an addon for Internet Explorer featuring RSS news reader, web collaboration and extended web search.   I've tried the software and as far as I can tell it's just  a piece of junk . RSS Feeds are not working properly and the extended web search is just a redirect to a couple of search engines. And it makes IE hang everytime you click on Pluck's side panel. Couldn't test the web collaboration part as i was too annoyed and un-installed it after less that 15 minutes of trial.  I guess I'll stick to  urlLink RssReader  for now!
     

    
</post>

<date>19,May,2004</date>
<post>


       
       urlLink Here 's an interesting review of the most commonly used software for posting blogs. I was thinking about moving this blog to Movable Type or, even better, Word Press.   urlLink Link  courtesy of  urlLink Slashdot.org 
     

    
</post>

<date>19,May,2004</date>
<post>


       
      Here's what I've got on my  urlLink blogger.com  home page:        As an active Blogger user, we would like to invite you to try out Google's new email service, Gmail.   Would you like to give it a whirl?     I wonder how long it took me to notice it...
     

    
</post>

<date>19,May,2004</date>
<post>


       
      Check out the mods at  urlLink mashie.org !
     

    
</post>

<date>18,May,2004</date>
<post>


       
       urlLink These people  would be in real pain!
     

    
</post>

<date>18,May,2004</date>
<post>


       
      If you escaped the  urlLink Crimson Room  here's a new challenge: the  urlLink Veridian Room !
     

    
</post>

<date>18,May,2004</date>
<post>


       
      Gotta love the feature!
     

    
</post>

<date>30,June,2004</date>
<post>


       
      Apart from being on the soundtrack of Shrek it was also featured on an Orange commercial (for their java-based games download services).   Well, the hits start coming and they don't stop coming Fed to the rules and I hit the ground running Didn't make sense not to live for fun, Your brain gets smart but your head gets dumb    urlLink Smash Mouth - All Star    
     

    
</post>

<date>29,June,2004</date>
<post>


       
      In celebration of hiting the 5e+6 customers mark Brainbench gives free access to all tests for 2 weeks: 1 July to 14 July.
     

    
</post>

<date>25,June,2004</date>
<post>


       
      This was the background of a Romanian commercial: a guy gets feed up with his job, throws his computer to the trash can, kisses his boss's secretary and insults his boss. What was the commercial for? A dry wine: Murfatlar Dry.   urlLink Wilson Simonal - Nem Vem Que Nao Tem    
     

    
</post>

<date>22,June,2004</date>
<post>


       
       urlLink Space.com  reports that the first commercial manned space flight has been achieved. The SpaceShipOne has made it to an altitude of 100 kilometers and that qualifies it to be the first private space ship. 62-years old pilot Mike Melvil was in control of the flight.     Photo coverage of the event on  urlLink Mojave Airport Weblog .
     

    
</post>

<date>18,June,2004</date>
<post>


       
      Although Google has provided its current users with a lot of invites, it seems that there are still many people desperately in need for an invite. I have some spare ones and am willing to give them away for free!  Well, almost for free. So, here's my offer: Gmail invite for a postcard (regular snailmail). And if I really like the postcard I might return the favor. Drop your name and email address in the comments!
     

    
</post>

<date>17,June,2004</date>
<post>


       
      Paul Allen, co-founder of Microsoft, had gathered a team to develop "a computer as powerful and easy to use as a desktop model, but small enough to fit in a pocket". Originally dubbed Vulcan miniPC, it was shown at DEMO 2004 unde the name FlipStart.     General features:  Full Windows XP Home/Professional operating system  1 GHz processor  256 MB system DRAM  30 GB hard drive  3D graphics with 8MB video DRAM  5.8" x 4.0" x 1.0" (148mm x 101mm x 26mm)  Weighs under 1.0 lb (450g)  USB 2.0 port    urlLink More details...  
     

    
</post>

<date>17,June,2004</date>
<post>


       
      Sweet love.   urlLink Marvin Gaye - Let's Get It On     
     

    
</post>

<date>16,June,2004</date>
<post>


       
      Checking my counter stats I noticed somebody bumped into this site on Google searching for  urlLink online business  on all  Romanian  pages. I checked to see for myself how high I was ranked and SURPRISE: I was listed on the first page, way ahead other people that actually do business online. Thx Google!
     

    
</post>

<date>16,June,2004</date>
<post>


       
       urlLink Space.com reports  that SpaceShipOne, the first private (as in non-guvernamental) space mission, is planning to use a combination of tire rubber and nitrous oxide (laughing gas) as fuel.   
     

    
</post>

<date>15,June,2004</date>
<post>


       
      Yes! It's  urlLink here  and it's only 4.7MB (Windows version). Go get it!
     

    
</post>

<date>15,June,2004</date>
<post>


       
       urlLink Engadget.com  notices that no sooner has Gmail launched than somebody wrote a program which allows user to download their messages by POP3. The program is called  urlLink Pop Goes the Gmail .   I did however get a 'System.Net.WebException' when I tried to run it, apparently YahooPops was already started and there was a port conflict ;)
     

    
</post>

<date>15,June,2004</date>
<post>


       
      This song is a must. Listen to it early in the morning, driving to work... But DO try to NOT kill your boss ;)   urlLink A3 - Woke Up This Morning        Please note that downloading these mp3s might infringe copyrights. These mp3s are not stored by me or my ISP. They are reachable through search engines.  
     

    
</post>

<date>14,June,2004</date>
<post>


       
      Thx to  urlLink Technorati.com :    urlLink Kit.blog  - Cristian "Kit" Paul is a brand designer blogging from Bucharest, Romania -  urlLink RSS feed     urlLink Sheila's Web Page  - Features pictures taken on her trip to Romania -  urlLink RSS feed     urlLink Halfway down the Danube  - Features a nice article on Romanian  urlLink Cherry Season  -  urlLink RSS feed     urlLink kitsched!  - Janos Rusiczki is a web designer located in Baia Mare -  urlLink RSS feed     urlLink @argumente.ro  - Dragos Novac is head of a small software company located in Bucharest; main focus of his blog is business and strategy -  urlLink RSS feed  
     

    
</post>

<date>12,June,2004</date>
<post>


       
       urlLink Technologyreview.com  features an article on  urlLink Wearable Robots . Pictures and details from the first demo are available.
     

    
</post>

<date>12,June,2004</date>
<post>


       
      So... it's not gonna be "MP3 of the week", it's gonna be "MP3 of the mood". I was driving back from work the other day and listening to the radio. They played this song and I was quite amused. But this moning when I woke up it was stuck on my brain. Here you go, knock yourself up too!   urlLink Clif Richard & The Shadows        Please note that downloading these mp3s might infringe copyrights. These mp3s are not stored by me or my ISP. They are reachable through search engines.  
     

    
</post>

<date>11,June,2004</date>
<post>


       
       urlLink TouchGraph GoogleBrowser V1.01  is a Java applet which offers a method to visualize where the links on a site will get you to. It's based on Google search results: too bad Google's bots didn't crawl to my blog yet :(
     

    
</post>

<date>10,June,2004</date>
<post>


       
      I'll try to post each week a link to an MP3. I will not keep these links up to date so take a look at the songs as fast as you can...    This week:  urlLink Weezer - Island in the Sun        Please note that downloading these mp3s might infringe copyrights. These mp3s are not stored by me or my ISP. They are reachable through search engines.  
     

    
</post>

<date>09,June,2004</date>
<post>


       
      Test your might and speed:  urlLink click the ducks !
     

    
</post>

<date>09,June,2004</date>
<post>


       
      Try to figure out  urlLink how many petals around the rose  are there!
     

    
</post>

<date>08,June,2004</date>
<post>


       
       urlLink   
     

    
</post>

<date>08,June,2004</date>
<post>


       
      Google seems to have been offering more invites to the masses. I got this link in my Inbox:  urlLink Invite a friend to join Gmail! 
     

    
</post>

<date>08,June,2004</date>
<post>


       
       urlLink   
     

    
</post>

<date>08,June,2004</date>
<post>


       
       urlLink FedBizOpps.gov  is the single government point-of-entry (GPE) for Federal government procurement opportunities over $25,000. Check out  urlLink this business oportunity !
     

    
</post>

<date>08,June,2004</date>
<post>


       
      Didier Hilhorst and Dan Rubin from  urlLink Sinelogic  have published an nice eBook which provides practical advice and tips to improve effectiveness and efficiency on low budget projects.  urlLink Download it for free  until June 12th!
     

    
</post>

<date>08,June,2004</date>
<post>


       
      I hope I'll have some spare time these days to contribute to this  urlLink travel guide to Romania  on  urlLink wikitravel.org .
     

    
</post>

<date>07,June,2004</date>
<post>


       
      Accidentally I came across this:  urlLink RFC 1149 - Standard for the transmission of IP datagrams on avian carriers .
     

    
</post>

<date>07,June,2004</date>
<post>


       
      I was searching on  urlLink technorati.com  for Romania and got some interesting results:    urlLink 2romania  - News about Romania around the world; comes with a  urlLink Atom XML feed     urlLink inromania  - Politics, Society and Cultural Issues concerning Romania; also has a  urlLink Atom XML feed     urlLink Patric's blog  - a Romanian programmer's web log; has a  urlLink RSS feed     urlLink So this is what it's like to be a PCV....  - The adventures of a Peace Corps volunteer in Romania;  urlLink Atom XML feed    Update: some more    urlLink Romanian Thoughts  - a blog that just started,  urlLink Atom XML feed     urlLink Carpe diem  -  urlLink Atom XML feed  
     

    
</post>

<date>07,June,2004</date>
<post>


       
       urlLink Wired News  writes about a  urlLink contest to outwit Google . Key word for the contest was  urlLink "nigritude ultramarine" !
     

    
</post>

<date>07,June,2004</date>
<post>


       
       urlLink Here 's when a chart says what words are unable to express.
     

    
</post>

<date>03,June,2004</date>
<post>


       
      Soon the user interface will take a quantum leap thanks to a Microsoft  urlLink usability inovation . 
     

    
</post>

<date>01,June,2004</date>
<post>


       
      These days I'm developing an allergy to IE so I switched to  urlLink Mozilla Firefox .
     

    
</post>

<date>01,June,2004</date>
<post>


       
       The new  Nokia 3220  comes with air-messaging. This&nbsp;feature&nbsp;enables phone users to cast a message which appears to float in mid-air. The effect is obtained using a series of leds and moving the phone from side to side in the air.   Story was also covered by  Boingboing.net . 
     

    
</post>

<date>16,July,2004</date>
<post>


       
      These days I sure wish I had one of these babies. Lots of desktop space! Lots!&nbsp; urlLink     urlLink   
     

    
</post>

<date>15,July,2004</date>
<post>


       
      Not much to add... Enjoy!   urlLink Sophie Ellis Bextor - I Am Not Good At Not Getting What I Want          Please note that downloading these mp3s might infringe copyrights. These mp3s are not stored by me or my ISP. They are reachable through search engines.    UPDATE: Seems that the site is using some sort of protection to avoid linking to the files. Use  urlLink mp3search.ru  to get to the file!
     

    
</post>

<date>07,July,2004</date>
<post>


       
      Every football fan remembers Beckham's missed penalty in the Euro 2004 match with Portugal. It seems that Pablo Carral, a 25-year-old Deportivo Coruna fan, was the one to catch the ball when it finally landed. He decided to offer it for action on eBay and the price went from $1.25 to millions in less than 48 hours.   The auction is still open until July 22 so if you want it and you can afford it go get it from  urlLink www.es.ebay.com !  I just hope the ball will bring more luck to it's future owner than it brought to Beckham.
     

    
</post>

<date>07,July,2004</date>
<post>


       
      Dunno how I ended up listening to it. Enjoy!   urlLink Anjelica Varum & Leonid Agutin - Vse V Tvoih Rukah      BTW: I would very much appreciate if anyone speaking russian could give me an English translation of the lyrics.
     

    
</post>

<date>06,July,2004</date>
<post>


       
      Sounds strange, doesn't it? According to the producer, the Titanium Dioxide cover on these  fresh2  fluorescent bulbs cause intense oxidization which breaks down odor completely. Surprisingly, it  urlLink seems to work .   urlLink     Via  urlLink Endgadget.com   UPDATE:  After doing some research (yeah, Google rulez!) I found out how TiO2 works. My first thought was that it ionizes the oxygen or generates ozone - O3 but no, it doesn't happen that way. In fact TiO2 is a strong photocatalyst and if there is light it will decompose organic molecules that come in contact with it generating CO2 and water.  There are a lot of uses for TiO2, from TiO2-coated glass windows that clean themselves to TiO2-coated pavement which decomposes nitrogen oxide from vehicle emissions. For more info  urlLink visit this link .  It also makes me think of Bosch's  urlLink AntiBacteria Fridge  (which is silver coated).
     

    
</post>

<date>05,July,2004</date>
<post>


       
      If you enjoyed escaping the  urlLink Viridian Room  then this might amuse you:  urlLink Anode et Cathode Office !
     

    
</post>

<date>01,July,2004</date>
<post>


       
         The concept isn't new but rumors say that in the next decade it could become a reality.   What is it?   It's a cable streched from Earth's surface to well above geostationary orbit (aproximately 100,000 kilometers long). An elevator running on this cable will haul tons of payload into orbit at a very cheap price.   What will keep it suspended?   Given the Earth's rotation, the centripetal acceleration will compensate for the gravity and ensure that the cable stays nicely streched.   What's it gonna be made of?   The stress will be high on the cable. This has been one of the main reasons why this ideea is still considered of SF domain. But Bradley Edwards, Director of Research for the Institute for Scientific Research (ISR), based in Fairmont, West Virginia, is pretty sure that a solution has been found: carbon nanotubes.   When will it be ready?   Hard to tell. There is a meeting this week where the institutions that finance the project will decide where things are going. However Bradley Edwards claims that in 15 years it could be done.  More info on  urlLink Space.com  and  urlLink SpaceElevator.com 
     

    
</post>

<date>13,August,2004</date>
<post>


       
      Dunno what's with me these days but as I stumbled upon this... why not post it?   urlLink Dean Martin - Mambo Italiano    
     

    
</post>

<date>12,August,2004</date>
<post>


       
          urlLink ZEN-STYLE.com  features a world map as seen by many fools. Anyone cares to contribute?  [Thx to  urlLink xandermol ]
     

    
</post>

<date>12,August,2004</date>
<post>


       
      Can't remember last time I had such a good laugh:   urlLink President Bush asks Google to find Osama Bin Laden    urlLink Ryanair aquires Concorde   And they have plenty more...
     

    
</post>

<date>06,August,2004</date>
<post>


       
      It seems that everybody is talking about it. Microsoft claims it's the cure for most of system administrator's headaches. IBM doesn't recomend it yet: "While this patch may be good news for other Microsoft Windows XP owners, IBM is directing XP users not to install SP2".  BBSpot presents a list of  urlLink Top 11 Updates That Aren't in Windows XP Service Pack 2.  Among them, my favourite: Pre-installed MyDoom virus.
     

    
</post>

<date>06,August,2004</date>
<post>


       
      It's been a while... but here goes:   urlLink Rod Stewart - These Foolish Things       Please note that downloading these mp3s might infringe copyrights. These mp3s are not stored by me or my ISP. They are reachable through search engines. 
     

    
</post>

<date>06,August,2004</date>
<post>


       
      I just got back home from a 3-weeks vacation in which I traveled all across the country. I'll be back as soon as I get some decent sleep. 
     

    
</post>


</Blog>