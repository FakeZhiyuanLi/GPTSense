The main reasoning behind unit testing that involves synchronization of the application on a broad spectrum is to identify and eliminate any potential synchronization issues that may arise in a multi-threaded environment. Synchronization is required to ensure that multiple threads accessing shared resources or data do so in a coordinated manner to avoid conflicts and ensure consistency in the application's behavior. Unit testing the synchronization aspect of the application helps to ensure that the threads are synchronized correctly, and the application behaves as expected. This approach minimizes the possibility of race conditions, deadlocks, and other synchronization issues, thereby ensuring the reliability and robustness of the application. Additionally, unit testing allows developers to detect and fix synchronization issues early in the development cycle, minimizing the impact of bugs on the overall application.